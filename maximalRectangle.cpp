#include "common.h"

class Solution {
private:
	vector<vector<int> > m_vDbCount;
public:
    int maximalRectangle(vector<vector<char> > &matrix) {
		if(matrix.empty())
			return 0;

		m_vDbCount = vector<vector<int> >(matrix.size(), vector<int>(matrix[0].size(), 0));
		int rect =  maximalRectangleImpl(matrix, 0, matrix[0].size(), 0, matrix.size(), 0, 0);


		for(int i = 0; i < m_vDbCount.size(); ++i){
			vector<int>& v = m_vDbCount[i];
			printContainer<vector<int> > (v, v.size(), "");
		}

		return rect;
    }

	int maximalRectangleImpl(vector<vector<char> > &matrix,
							 int l, int r, int t, int b, int x, int y) {
		if(l < 0 || t < 0 || r < 0 || b < 0 ||
		   l > matrix[0].size() || t > matrix.size() ||
		   r > matrix[0].size() || b > matrix.size() ||
		   l >= r || t >= b)
			return 0;

		for(int j = y; j < b; ++j)
			for(int i = x; i < r; ++i){
				m_vDbCount[j][i]++;
				if(matrix[j][i] == '0'){
					return std::max(std::max((r - l)*(j - t),//maximalRectangleImpl(matrix, l, r, t, j), 
											 maximalRectangleImpl(matrix, l, r, j + 1, b, l, j + 1)),
									std::max(maximalRectangleImpl(matrix, l, i, t, b, l, j + 1),
											 maximalRectangleImpl(matrix, i + 1, r, t, b, i + 1, j)));
				}
			}

		return (r - l)*(b - t);
	}
};

int main(int argc, char** argv){
#if 1
	const char* array[] = {"1111111111111101001111111100111011111111",
						   "1111011011111111101101111101111111111111",
						   "0111101011111101101101101111111111111111",
						   "0101101011111111111101111111010110111111",
						   "1111111111110111110110010111111111111111",
						   "1111111110110101111111111101011111101111",
						   "0110110101110011111111111111110111110101",
						   "0111111111111100111111100110011011010101",
						   "1111011110111111111011011011110101101011",
						   "1111111110111111111101101101110111101111",
						   "1110110011111111111100111111111111111111",
						   "1011111110111101111001110111111111111111",
						   "0110111111111111101111110111011111011111",
						   "1111111111111111011111111111110111111011",
						   "1111100111111110101100111111111111101111",
						   "1111101111111110111111011111111111011111",
						   "1111101111111111111111011001111110011111",
						   "1111110111111111011111111111110111110111",
						   "1011111111111111010111110010111110111111",
						   "1111110011111111111110111111111111111011",
						   "1111111111111111110111011111011111011011",
#if 0
						   "1100011011111111111111011111011111111111",
						   "1111101011111111111101100101110011111111",
						   "1110010111111111111011011110111101111101",
						   "1111111111111101101111111111101111111111",
						   "1111111011111101111011111111111110111111",
						   "1110011111111110111011111111110111110111",
						   "1111111111111100111111010111111111110111",
						   "1111111111111111111111000111111111011101",
						   "1111110111111111111111111101100111011011",
						   "1111011011111101101101111110111111101111",
						   "1111111111011111111111111111111111111111",
						   "1111111111111111111111111111111111111111",
						   "1100011111111110111111111111101111111011",
						   "1111101111111101111010111111111111111111",
						   "0111111111110011111111110101011011111111",
						   "1011011111101111111111101111111111110011",
						   "1010111111111111111111111111111110011111",
						   "0111101111011111111111111111110111111111",
						   "0111111011111111011101111011101111111111",
						   "0111111111110101111011111101011001111011",
						   "1111111111111011110111111101111111101110",
						   "1111101111111100111111111110111111001111",
						   "1101101111110101111101111111100111010100",
#endif
						   "0110111111100111110010111110111011011101"};

	vector<vector<char> > grid;
	for(int i = 0; i < sizeof(array)/sizeof(array[0]); ++i){
		vector<char> v(array[i], array[i] + strlen(array[i]));
		grid.push_back(v);
		printContainer<vector<char> > (v, v.size(), "");
	}
#else
	char array1[][4] = {{ '0', '0', '1', '1'},
					   { '1', '0', '1', '0'},
					   { '0', '0', '0', '0'}};
	char array[][2] = {{'1', '0'}};

	vector<vector<char> > grid;
	for(int i = 0; i < sizeof(array)/sizeof(array[0]); ++i){
		vector<char> v(array[i], array[i] + sizeof(array[i])/sizeof(array[i][0]));
		grid.push_back(v);
		printContainer<vector<char> > (v, v.size(), "");
	}
#endif


	Solution s;
	int n = s.maximalRectangle(grid);
	cout << "Rect area = " << n << endl;
	return 0;
}
